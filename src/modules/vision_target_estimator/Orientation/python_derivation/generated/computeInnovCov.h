// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym
{

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: computeInnovCov
 *
 * Args:
 *     meas_unc: Scalar
 *     covariance: Matrix11
 *     meas_matrix: Matrix11
 *
 * Outputs:
 *     innov_cov_updated: Scalar
 */
template <typename Scalar>
void Computeinnovcov(const Scalar meas_unc, const matrix::Matrix<Scalar, 1, 1> &covariance,
		     const matrix::Matrix<Scalar, 1, 1> &meas_matrix,
		     Scalar *const innov_cov_updated = nullptr)
{
	// Total ops: 3

	// Input arrays

	// Intermediate terms (0)

	// Output terms (1)
	if (innov_cov_updated != nullptr) {
		Scalar &_innov_cov_updated = (*innov_cov_updated);

		_innov_cov_updated = covariance(0, 0) * std::pow(meas_matrix(0, 0), Scalar(2)) + meas_unc;
	}
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
